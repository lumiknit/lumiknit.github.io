(function(){"use strict";const i=Object.getPrototypeOf(async function(){}).constructor;(r=>new Promise(n=>setTimeout(n,r)))(0),(()=>{const r={};class n{fullText="";flushText(e,t){postMessage({type:"<text-out",text:t}),this.fullText+=t}logWithLevel(e,...t){const s=[];for(const o of t)if(o instanceof Error)s.push(`Error (${o.name}): ${o.message}: ${o.stack}`);else if(typeof o=="string")s.push(o);else{let c="";try{c=JSON.stringify(o)}catch{c=String(o)}s.push(c)}this.flushText(e,s.join(" ")+`
`)}log(...e){return this.logWithLevel("info",...e)}debug(...e){return this.logWithLevel("info",...e)}warn(...e){return this.logWithLevel("warn",...e)}error(...e){return this.logWithLevel("error",...e)}assert(e,...t){e||this.error("Assertion failed:",...t)}}n.toString=()=>"function Console() { [native code] }",self.onmessage=async l=>{const e=l.data;switch(e.type){case">run":{console.log("[Worker] Received run message");const t=e.code,s=new n;try{console.log("[Worker] Creating a function from code");const o=new i("$","console",t);console.log("[Worker] Executing the function"),await o(r,s),console.log("[Worker] Function executed")}catch(o){console.error("[Worker] Error while executing code",o),s.error(o)}self.postMessage({type:"<run",output:s.fullText})}break;default:throw new Error(`Unknown message type: ${e.type}`)}},console.log("Workers ready")})()})();
